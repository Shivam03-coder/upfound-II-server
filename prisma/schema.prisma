generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id               String       @id @default(uuid())
    jobSeekerProfile JobSeeker?
    role             UserRole?
    post             Post[]
    entityLike       EntityLike[]
    comment          Comment[]
    createdAt        DateTime     @default(now())
    updatedAt        DateTime     @updatedAt
    experience       Experience?
    recruiter        Recruiter?
    profile          Profile?
    authProvider     AuthProvider @default(GOOGLE)

    @@map("users")
}

model JobSeeker {
    id                    String                       @id @default(uuid())
    user                  User                         @relation(fields: [id], references: [id], onDelete: Cascade)
    primaryInterest       PrimaryInterest?
    location              String?
    isPhoneNumberVerified Boolean                      @default(false)
    status                JobSeekerStatus?
    profileView           Int                          @default(0)
    searchView            Int                          @default(0)
    projectLinks          JobSeekerProjectLink?
    technicalProfile      JobSeekerTechnicalProfile?
    preferences           JobSeekerPreferences?
    education             JobSeekerEducation?
    documents             JobSeekerDocument[]
    culturePreferences    JobSeekerCulturePreferences?
    createdAt             DateTime                     @default(now())
    updatedAt             DateTime                     @updatedAt

    @@index([isPhoneNumberVerified])
    @@index([status])
    @@index([profileView])
    @@index([searchView])
    @@index([location])
    @@map("job_seekers")
}

model JobSeekerProjectLink {
    id          String    @id @default(uuid())
    jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
    jobSeekerId String    @unique
    projectLink String[]

    @@map("job_seeker_project_link")
}

model JobSeekerTechnicalProfile {
    id                String                   @id @default(uuid())
    jobSeeker         JobSeeker                @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
    jobSeekerId       String                   @unique
    desiredRoles      String[]
    skills            String[]
    certifications    JobSeekerCertification[]
    yearsOfExperience String?
    createdAt         DateTime                 @default(now())
    updatedAt         DateTime                 @updatedAt

    @@map("job_seeker_technical_profile")
}

model JobSeekerCertification {
    id                 String                    @id @default(uuid())
    name               String
    institution        String
    graduationYear     Int
    technicalProfile   JobSeekerTechnicalProfile @relation(fields: [technicalProfileId], references: [id], onDelete: Cascade)
    technicalProfileId String

    @@map("job_seeker_certifications")
}

model JobSeekerPreferences {
    id                     String                 @id @default(uuid())
    jobSeeker              JobSeeker              @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
    jobSeekerId            String                 @unique
    activelyLooking        ActivelyLookingStatus
    workArrangement        WorkArrangement
    startupStagePreference StartupStagePreference
    jobType                JobType
    createdAt              DateTime               @default(now())
    updatedAt              DateTime               @updatedAt

    @@map("job_seeker_preferences")
}

model JobSeekerEducation {
    id          String                   @id @default(uuid())
    jobSeeker   JobSeeker                @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
    jobSeekerId String                   @unique
    education   JobSeekerEducationItem[]
    createdAt   DateTime                 @default(now())
    updatedAt   DateTime                 @updatedAt

    @@map("job_seeker_education")
}

model JobSeekerEducationItem {
    id             String             @id @default(uuid())
    degree         String
    institution    String
    graduationYear Int?
    education      JobSeekerEducation @relation(fields: [educationId], references: [id], onDelete: Cascade)
    educationId    String

    @@map("job_seeker_education_item")
}

model JobSeekerDocument {
    id           String       @id @default(uuid())
    jobSeeker    JobSeeker    @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
    jobSeekerId  String
    documentUrl  String
    documentType DocumentType @default(RESUME)
    fileType     String
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt

    @@map("job_seeker_documents")
}

model JobSeekerCulturePreferences {
    id                       String    @id @default(uuid())
    jobSeeker                JobSeeker @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
    jobSeekerId              String    @unique
    nextJobGoals             String?
    workMotivation           String?
    workStylePreference      String?
    preferredWorkEnvironment String?
    createdAt                DateTime  @default(now())
    updatedAt                DateTime  @updatedAt

    @@map("job_seeker_culture_preferences")
}

enum AuthProvider {
    GOOGLE
    PHONE_NUMBERI
    LINKEDIN
}

enum PrimaryInterest {
    TECH_DEVELOPER_ENGINEER
    PRODUCT_MANAGEMENT
    UI_UX_DESIGN
    MARKETING_GROWTH
    SALES_BD
    HR_TALENT
    OPERATIONS
    FINANCE
    LEGAL_COMPLIANCE
    CONTENT_COPYWRITING
    GENERALIST
}

enum JobSeekerStatus {
    FRESHER
    EXPERIENCED
}

enum ActivelyLookingStatus {
    ACTIVELY_LOOKING
    OPEN_TO_WORK
    NOT_LOOKING_NOW
}

enum WorkArrangement {
    REMOTE
    HYBRID
    ON_SITE
}

enum StartupStagePreference {
    IDEA_STAGE
    GROWTH_STAGE
    MATURE_STAGE
}

enum JobType {
    INTERNSHIPS
    FULL_TIME
    PART_TIME
    CO_FOUNDER
    ADVISOR_MENTOR
}

enum DocumentType {
    RESUME
    COVER_LETTER
    PORTFOLIO
}

enum UserRole {
    JOBSEEKER
    RECRUITER
    ADMIN
}

// ======================== RECUIRTER SECTION ========================

model Recruiter {
    id                 String          @id
    user               User            @relation(fields: [id], references: [id], onDelete: Cascade)
    designation        String?
    companyName        String?
    location           String?
    aboutCompany       String?         @db.VarChar(2000)
    skillSet           Json?
    communityProfileId String?
    createdAt          DateTime        @default(now())
    updatedAt          DateTime        @updatedAt
    company            CompanyProfile? @relation("RecuirterToCompanyProfile")
    jobCreated         Job[]

    @@map("recruiters")
}

model CompanyProfile {
    id                 String    @id @default(uuid())
    role               String
    companyName        String
    companyType        String?
    companyPic         String?
    websiteLink        String?
    socialLinks        String[]
    location           String?
    companyStage       String?
    companySize        String?
    foundedIn          Int?
    foundedYear        String?
    workEmail          String?
    companySummary     String?   @db.VarChar(4000)
    fundingDetails     String?
    profileView        Int       @default(0)
    totalOpenPositions Int       @default(0)
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    jobs               Job[]
    recruiterId        String    @unique
    recruiter          Recruiter @relation("RecuirterToCompanyProfile", fields: [recruiterId], references: [id], onDelete: Cascade)

    @@map("company_profiles")
}

//  ========================= JOB =============================

model Job {
    id             String    @id @default(uuid())
    role           String
    jobRole        String
    jobDescription String
    typeOfPosition String
    workMode       String
    jobLocation    String
    city           String?
    state          String?
    pincode        String?
    country        String?
    workExperience String?
    salaryFrom     Int?
    salaryTo       Int?
    equityFrom     Int?
    equityTo       Int?
    jobView        Int       @default(0)
    jobStatus      JobStatus @default(REVIEW)
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    companyId               String
    company                 CompanyProfile           @relation(fields: [companyId], references: [id], onDelete: Cascade)
    recruiterId             String
    recruiter               Recruiter                @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
    JobApplicationQuestions JobApplicationQuestions?
    JobsRequiredSkills      JobsRequiredSkills?

    @@map("jobs")
}

model JobApplicationQuestions {
    id        String   @id @default(uuid())
    job       Job      @relation(fields: [id], references: [id])
    questions String[]
}

model JobsRequiredSkills {
    id     String   @id @default(uuid())
    job    Job      @relation(fields: [id], references: [id])
    skills String[]
}

model JobToApplicant {
    id              String           @id @default(uuid())
    jobId           String
    applicantId     String
    jobStatus       JobStatus
    JobApplications JobApplications?

    @@map("job_to_applicants")
}

model JobApplications {
    id               String         @id @default(uuid())
    resume           String
    answer           String[]
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
    jobToApplicantId String         @unique
    jobToApplicant   JobToApplicant @relation(fields: [jobToApplicantId], references: [id], onDelete: Cascade)

    @@map("jobapplications")
}

enum JobStatus {
    ACTIVE
    PAUSED
    DELETED
    REVIEW
    REJECT
}

// ======================= COMMON MODULE ============================

model Profile {
    id             String  @id @default(uuid())
    age            Int?
    name           String
    email          String  @unique
    gender         String?
    location       String?
    phoneNumber    String? @unique
    bio            String?
    tagline        String?
    profilePicture String?
    user           User    @relation(fields: [id], references: [id], onDelete: Cascade)

    @@map("profile")
}

model Experience {
    id              String           @id @default(uuid())
    user            User             @relation(fields: [id], references: [id], onDelete: Cascade)
    workExperiences WorkExperience[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("experiences")
}

model WorkExperience {
    id             String   @id @default(uuid())
    title          String
    employmentType String
    company        String
    startMonth     Int?
    startYear      Int?
    endMonth       Int?
    endYear        Int?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    experienceId String
    experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)

    @@map("work_experiences")
}

// ======================== COMMUNITY SECTION ========================

model Post {
    id        Int           @id @default(autoincrement())
    content   String        @db.VarChar(5000)
    community CommunityType
    likeCount Int           @default(0)
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    media    Media[]
    comments Comment[]

    @@index([userId])
    @@index([community])
    @@index([createdAt])
    @@map("posts")
}

model Media {
    id        String        @id @default(uuid())
    url       String
    mediaType PostMediaType

    postId Int?
    post   Post? @relation(fields: [postId], references: [id], onDelete: Cascade)

    commentId Int?
    comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

    @@index([postId])
    @@index([commentId])
    @@map("posts_media")
}

model Comment {
    id        Int      @id @default(autoincrement())
    message   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    likeCount Int      @default(0)
    role      String

    postId Int
    post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    parentId Int?
    parent   Comment?  @relation("CommentThread", fields: [parentId], references: [id], onDelete: Cascade)
    replies  Comment[] @relation("CommentThread")

    media Media[]

    @@index([postId])
    @@index([userId])
    @@index([createdAt])
    @@index([parentId])
    @@map("post_comments")
}

model EntityLike {
    id         String     @id @default(uuid())
    entityId   Int
    entityType EntityType
    likedAt    DateTime   @default(now())
    userId     String
    user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([entityId, entityType, userId])
    @@index([entityId, entityType])
    @@index([userId])
    @@index([likedAt])
    @@map("entity_likes")
}

enum CommunityType {
    FINTECH
    HEALTHTECH
    AGRITECH
    D2C_ECOMMERCE
    EDTECH
    AI_ML_DEEPTECH
    HR_TECH
    CREATOR_ECONOMY
    CLIMATE_TECH
    SAAS
    WEB3_BLOCKCHAIN
    OTHER_DOMAINS
    BANGALORE_STARTUPS
    PUNE_STARTUPS
    DELHI_NCR_STARTUPS
    TIER2_CITY_STARTUPS
    REMOTE_GLOBAL_STARTUPS
    ASKUP
    IDEA2GO
    STARTFIRST
    PROOFZONE
    BUILDCORE
    SCALEMODE
    PITCHPLAY
}

enum PostMediaType {
    IMAGE
    VIDEO
}

enum EntityType {
    POST
    COMMENT
}
