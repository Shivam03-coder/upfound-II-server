generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id               String       @id @default(uuid())
    email            String       @unique
    phoneNumber      String?      @unique
    createdAt        DateTime     @default(now())
    updatedAt        DateTime     @updatedAt
    jobSeekerProfile JobSeeker?
    role             UserRole?
    Post             Post[]
    EntityLike       EntityLike[]
    Comment          Comment[]
}

model JobSeeker {
    id                    String                       @id @default(uuid())
    userId                String                       @unique
    user                  User                         @relation(fields: [userId], references: [id])
    name                  String
    age                   Int?
    bio                   String?
    profilePicture        String?
    primaryInterest       PrimaryInterest?
    location              String?
    tagline               String?
    isPhoneNumberVerified Boolean                      @default(false)
    status                JobSeekerStatus?
    profileView           Int                          @default(0)
    searchView            Int                          @default(0)
    gender                String?
    projectLinks          JobSeekerProjectLink?
    technicalProfile      JobSeekerTechnicalProfile?
    workExperience        JobSeekerWorkExperience?
    preferences           JobSeekerPreferences?
    education             JobSeekerEducation?
    documents             JobSeekerDocument[]
    culturePreferences    JobSeekerCulturePreferences?
    createdAt             DateTime                     @default(now())
    updatedAt             DateTime                     @updatedAt

    @@index([isPhoneNumberVerified])
    @@index([status])
    @@index([profileView])
    @@index([searchView])
    @@index([location])
}

model JobSeekerProjectLink {
    id          String    @id @default(uuid())
    jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id])
    jobSeekerId String    @unique
    projectLink String[]
}

model JobSeekerTechnicalProfile {
    id                String                   @id @default(uuid())
    jobSeeker         JobSeeker                @relation(fields: [jobSeekerId], references: [id])
    jobSeekerId       String                   @unique
    desiredRoles      String[]
    skills            String[]
    certifications    JobSeekerCertification[]
    yearsOfExperience String?
    createdAt         DateTime                 @default(now())
    updatedAt         DateTime                 @updatedAt
}

model JobSeekerCertification {
    id                 String                    @id @default(uuid())
    name               String
    institution        String
    graduationYear     Int
    technicalProfile   JobSeekerTechnicalProfile @relation(fields: [technicalProfileId], references: [id], onDelete: Cascade)
    technicalProfileId String
}

model JobSeekerWorkExperience {
    id              String                @id @default(uuid())
    jobSeeker       JobSeeker             @relation(fields: [jobSeekerId], references: [id])
    jobSeekerId     String                @unique
    workExperiences JobSeekerExperience[]
    createdAt       DateTime              @default(now())
    updatedAt       DateTime              @updatedAt
}

model JobSeekerExperience {
    id                  String                  @id @default(uuid())
    workExperienceGroup JobSeekerWorkExperience @relation(fields: [groupId], references: [id])
    groupId             String
    title               String
    employmentType      String
    company             String
    startMonth          Int?
    startYear           Int?
    endMonth            Int?
    endYear             Int?
}

model JobSeekerPreferences {
    id                     String                 @id @default(uuid())
    jobSeeker              JobSeeker              @relation(fields: [jobSeekerId], references: [id])
    jobSeekerId            String                 @unique
    activelyLooking        ActivelyLookingStatus
    workArrangement        WorkArrangement
    startupStagePreference StartupStagePreference
    jobType                JobType
    createdAt              DateTime               @default(now())
    updatedAt              DateTime               @updatedAt
}

model JobSeekerEducation {
    id          String                   @id @default(uuid())
    jobSeeker   JobSeeker                @relation(fields: [jobSeekerId], references: [id])
    jobSeekerId String                   @unique
    education   JobSeekerEducationItem[]
    createdAt   DateTime                 @default(now())
    updatedAt   DateTime                 @updatedAt
}

model JobSeekerEducationItem {
    id             String             @id @default(uuid())
    degree         String
    institution    String
    graduationYear Int?
    education      JobSeekerEducation @relation(fields: [educationId], references: [id])
    educationId    String
}

model JobSeekerDocument {
    id           String       @id @default(uuid())
    jobSeeker    JobSeeker    @relation(fields: [jobSeekerId], references: [id])
    jobSeekerId  String
    documentUrl  String
    documentType DocumentType @default(RESUME)
    fileType     String
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
}

model JobSeekerCulturePreferences {
    id                       String    @id @default(uuid())
    jobSeeker                JobSeeker @relation(fields: [jobSeekerId], references: [id])
    jobSeekerId              String    @unique
    nextJobGoals             String?
    workMotivation           String?
    workStylePreference      String?
    preferredWorkEnvironment String?
    createdAt                DateTime  @default(now())
    updatedAt                DateTime  @updatedAt
}

enum PrimaryInterest {
    TECH_DEVELOPER_ENGINEER
    PRODUCT_MANAGEMENT
    UI_UX_DESIGN
    MARKETING_GROWTH
    SALES_BD
    HR_TALENT
    OPERATIONS
    FINANCE
    LEGAL_COMPLIANCE
    CONTENT_COPYWRITING
    GENERALIST
}

enum JobSeekerStatus {
    ACTIVE
    INACTIVE
    BANNED
}

enum ActivelyLookingStatus {
    ACTIVELY_LOOKING
    OPEN_TO_WORK
    NOT_LOOKING_NOW
}

enum WorkArrangement {
    REMOTE
    HYBRID
    ON_SITE
}

enum StartupStagePreference {
    EARLY_STAGE
    GROWTH_STAGE
    MATURE_STAGE
}

enum JobType {
    INTERNSHIPS
    FULL_TIME
    FREELANCE
    PART_TIME
    CO_FOUNDER
    ADVISOR_MENTOR
}

enum DocumentType {
    RESUME
    COVER_LETTER
    PORTFOLIO
}

enum UserRole {
    JOBSEEKER
    RECRUITER
    ADMIN
}

// ======================== COMMUNITY SECTION ========================

model Post {
    id           Int           @id @default(autoincrement())
    content      String        @db.VarChar(5000)
    community    CommunityType
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    likeCount    Int           @default(0)
    commentCount Int           @default(0)

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    media    PostMedia[]
    comments Comment[]

    @@index([userId])
    @@index([community])
    @@index([createdAt])
    @@map("posts")
}

model PostMedia {
    id        String        @id @default(uuid())
    url       String
    mediaType PostMediaType
    postId    Int?
    post      Post?         @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@index([postId])
    @@map("posts_media")
}

model Comment {
    id        String   @id @default(uuid())
    message   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    likeCount Int      @default(0)
    postId    Int
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([postId])
    @@index([userId])
    @@index([createdAt])
    @@map("post_comments")
}

model EntityLike {
    id         String     @id @default(uuid())
    entityId   String
    entityType EntityType
    likedAt    DateTime   @default(now())
    userId     String
    user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([entityId, entityType, userId])
    @@index([entityId, entityType])
    @@index([userId])
    @@index([likedAt])
    @@map("entity_likes")
}

enum CommunityType {
    FINTECH
    HEALTHTECH
    AGRITECH
    D2C_ECOMMERCE
    EDTECH
    AI_ML_DEEPTECH
    HR_TECH
    CREATOR_ECONOMY
    CLIMATE_TECH
    SAAS
    WEB3_BLOCKCHAIN
    OTHER_DOMAINS
    BANGALORE_STARTUPS
    PUNE_STARTUPS
    DELHI_NCR_STARTUPS
    TIER2_CITY_STARTUPS
    REMOTE_GLOBAL_STARTUPS
    ASKUP
    IDEA2GO
    STARTFIRST
    PROOFZONE
    BUILDCORE
    SCALEMODE
    PITCHPLAY
}

enum PostMediaType {
    IMAGE
    VIDEO
}

enum EntityType {
    POST
    COMMENT
}
